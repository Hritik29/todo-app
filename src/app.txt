My Files ---- Practice ---- XXXXX --------------------------------------XXXXX-----------------------

// Uncontrolled Forms using Classes

import React, { Component } from 'react'

export default class App extends Component {
  constructor(){
    super()
    this.name = React.createRef()
    this.password = React.createRef()
  }
  submitHandler(event){
    event.preventDefault()
    console.log(this.name.current.value)
  }
  render() {
    return (
      <div>
        <h1>Uncontrolled</h1>
        <form onSubmit={(event)=>{this.submitHandler(event)}}>
            <input type='text' placeholder='Enter name' ref={this.name}/> <br></br> <br></br>
            <input type="password" placeholder='Enter password' ref={this.password}/> <br></br> <br></br>
            <button type='submit'>Submit</button>
        </form>

      </div>
    )
  }
}



import React, { useState } from 'react'

export default function App() {
  const [like, setLike] = useState(0)
  const [unlike, setUnlike] = useState(0)
  const sub = () => {
    setUnlike(unlike-1)
    setLike(unlike-1)
  }
  const add = ()=>{
    setLike(like+1)
    setUnlike(unlike-1)
  }
  return (
    <div>
      <button onClick={add}>Like | {like}</button>  
      <button onClick={sub}>Unlike | {unlike}</button>  
    </div>
  )
}

// Uncontrolled Forms using function

import React, { useRef } from 'react'

export default function App () {
  const nameRefs = useRef()
  const handlesubmit = (e) => {
    e.preventDefault()
    console.log(nameRefs.current.value);
  }
  return (
    <div>
      <form onSubmit={(e)=>{handlesubmit(e)}}>
        <input type="text" placeholder='Enter Name' ref={nameRefs}/><br /><br />
        <button type='submit'>Submit</button>
      </form>
    </div>
  )
}

// Controlled Forms using Classes

import React, { Component } from 'react'

export default class App extends Component {
  constructor(){
    super()
    this.state ={
      name: '',
      password: '',
    }
  }
  submit(){
    console.log(this.state);
  }
  render() {
    return (
      <div>
        <h1>Controlled Component</h1>
        <input type='text' placeholder='Enter name' onChange={(event)=>{this.setState({name : event.target.value})}}/>
        <input type='password' placeholder='Enter password' onChange={(event)=>{this.setState({password : event.target.value})}}/>
        <button type='submit' onChange={this.submit()}>Submit</button>
      </div>
    )
  }
}

// ADDING STYLES DYNAMICALLY ....

import React, { Component } from 'react'

export default class App extends Component {
  constructor(props) {
    super(props);
    this.state = {
      colorstyle: 'Black'
    }
  }
  render() {
    return (
      <div>
        <h1 style={{color:this.state.colorstyle}}>I am Hritik Mandloi</h1>
        <div>
          <button onClick={()=>{this.setState({colorstyle:'blue'})}}>BLUE</button>
          <button onClick={()=>{this.setState({colorstyle:'red'})}}>RED</button>
          <button onClick={()=>{this.setState({colorstyle:'green'})}}>GREEN</button>
          <button onClick={()=>{this.setState({colorstyle:'Black'})}}>BLACK</button>
          <button onClick={()=>{this.setState({colorstyle:'yellow'})}}>YELLOW</button>
        </div>
      </div>
    )
  }
}


// Assesment on useReducer... 


import React, { useReducer } from 'react';

const counterReducer = (state, action) => {
    switch (action.type) {
        case 'increment':
            return { count: state.count + 1 };
        case 'decrement':
            return { count: state.count - 1 };
        case 'reset':
            return { count: 0 };
        case 'add':
            return { count: state.count + action.value };
        case 'subtract':
            return { count: state.count - action.value };
        default:
            return state;
    }
}

export default function App() {
    const [state, dispatch] = useReducer(counterReducer, { count: 0 });

    return (
        <div>
            <h1>{state.count}</h1>
            <button onClick={() => dispatch({ type: 'increment' })}>Increment</button>
            <button onClick={() => dispatch({ type: 'decrement' })}>Decrement</button>
            <button onClick={() => dispatch({ type: 'subtract', value: 100 })}>Subtract 100</button>
            <button onClick={() => dispatch({ type: 'subtract', value: 100 })}>Add 100</button>
            <button onClick={() => dispatch({ type: 'reset' })}>Reset</button>
        </div>
    );
}


// UseEffect Alternate : ComponentDidMount and ComponentDidUpdate

import React, { Component } from 'react'

export default class App extends Component {

  constructor(props){
    super(props)
    this.state = {
      count : 0
    }
  }
  componentDidMount(){
    console.log("componentDidMount");
  }
  componentDidUpdate(){
    console.log("componentDidUpdate");
  }
  updateState = () =>{
    this.setState({
      count : this.state.count + 1
    })
  }
  render() {
    return (
      <div>
        <h1>{this.state.count}</h1>
        <button onClick={this.updateState}>Update</button>
      </div>
    )
  }
}

// UseEffect USED FOR 1ST TIME 

import React, { useEffect, useState } from "react";

export default function App() {
  const [count,setCount] = useState(0)
  const [name,setName] = useState('Aman')

  useEffect(()=>{
    console.log("Hello Hritik")
  })
  return (
    <div>
      <h1>{count}</h1>
      <h1>{name}</h1>
      <button onClick={()=>setCount(count+1)}>Update count</button>
      <button onClick={()=>setName('hritik')}>Update Name</button>
    </div>
  )
}


import React from 'react'
import { useEffect } from 'react' 
import {useState } from 'react'


export default function App() {
    const [count, setCount] = useState(0)
    const [name, setName] = useState("Hritik")
    useEffect(() => {
        const interval = setInterval(() => {
            console.log("hello HRITIK")
        }, 1000);
        return () => clearInterval(interval);
    }, [count])
    return (
        <div>
            <h1>{count}</h1>
            <h1>{name}</h1> <button onClick={() => setCount(count + 1)}>Update count</button> 
            <button onClick={() => setName("Mandloi")}>Update name</button>
        </div>
    )
}

// Use of REDUCERs

import React,{ useReducer} from 'react'

const counterReducer=(state,action)=>{
    console.log("state",state);
    console.log("action",action);
    if(action.type === "Hritik"){
        return{
            count : state.count + 1
        }
    }
    else if(action.type === "Aman"){
        return{
            count : state.count + 10
        }
    }
    else if(action.type === "Panno"){
        return{
            count : state.count + 100
        }
    }
    return state
}

export default function App() {
    const [state,dispatch] = useReducer(counterReducer,{count : 0})
  return (
    <div>
        <h1>{state.count}</h1>
        <button onClick={()=>{dispatch({type:"Hritik"})}}>Update State</button>
        <button onClick={()=>{dispatch({type:"Aman"})}}>Update State</button>
        <button onClick={()=>{dispatch({type:"Panno"})}}>Update State</button>
    </div>
  )
}


import React from 'react'
import News from './components/NewsApp/News'


export default function App() {
  return (
    <div>
        <News />
    </div>
  )
}


